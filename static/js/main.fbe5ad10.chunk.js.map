{"version":3,"sources":["assets/pot_of_gold.webp","components/minter/Cover.js","components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/wallet/index.js","hooks/useContract.js","utils/minter.js","components/minter/nfts/Add.js","components/minter/nfts/Card.js","components/ui/Loader.js","assets/pot_of_gold.jpg","components/minter/nfts/index.js","assets/logo.png","App.js","hooks/useBalance.js","hooks/useNftContract.js","hooks/useStakersContract.js","reportWebVitals.js","index.js"],"names":["Cover","connect","className","onClick","catch","e","console","log","src","potOfGoldImage","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","style","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","variant","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","useContract","abi","contractAddress","useContractKit","getConnectedKit","useState","contract","setContract","getContract","useCallback","kit","web3","eth","Contract","formattedName","name","trim_name","trim","includes","replaceAll","makeFileObjects","file","blob","Blob","JSON","stringify","type","File","client","Web3Storage","token","process","storeFiles","files","put","cid","uploadToIpfs","file_name","image_name","image_cid","image_url","mintNft","nftContract","performActions","description","ipfsImage","defaultAccount","data","image","owner","file_cid","URI","methods","mint","send","from","transaction","fetchNfts","nfts","totalSupply","call","nftsLength","i","nft","Promise","resolve","tokenURI","nftURI","ownerOf","nftOwner","fetchNftMeta","nftData","index","push","Number","all","ipfsUrl","fetch","fetch_meta","json","meta","createPot","stakersContract","potName","potSize","error","fetchPots","getAllPots","map","_pot","creator","winner","tokens","stakers","status","pots","stake","stakersAddress","potId","tokenId","approve","AddNfts","save","setName","setIpfsImage","setDescription","show","setShow","handleClose","class","Modal","onHide","centered","Header","Title","color","textAlign","Body","Form","Control","placeholder","fontSize","onChange","value","image_file","imageUrl","alert","Footer","disabled","Nft","Col","alt","Loader","role","Pot","potData","setTokenId","potOfGoldImg","CreatePot","create","setPotName","setPotSize","NftList","setNfts","setPots","loading","setLoading","getNFTAssets","allNfts","getPots","_fetchPots","allPots","addNft","toast","_createPot","saddr","Stakers","_stake","Add","Row","xs","sm","lg","filter","_nft","App","balance","setBalance","getBalance","getTotalBalance","useBalance","ABI","ADDRESS","NftContract","Nav","logo","CELO","Container","fluid","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.fbe5ad10.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pot_of_gold.6a43b9d1.webp\";","import React from 'react';\nimport potOfGoldImage from \"../../assets/pot_of_gold.webp\"\n\n\nconst Cover = ({ connect }) => {\n    return (\n      <div className=\"cover_page d-flex align-items-center\">\n        <div className=\"cover_header d-flex align-items-center\">\n          <div className=\"cover_text\">\n            <h1>Stakers - One stop point for NFT staking</h1>\n            <p>\n              Stake your NFT into a pot and stand a chance to win more NFTs.\n              Winner gets randomly selected to win all tokens in the pot\n            </p>\n            <button\n              onClick={() => connect().catch((e) => console.log(e))}\n            >\n              Connect Wallet\n            </button>\n          </div>\n        </div>\n        <img className='cover_image_lg' src={potOfGoldImage} />\n      </div>\n    );\n};\n\nexport default Cover;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {ToastContainer} from 'react-toastify';\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: '',\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 3, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({address, size, ...rest}) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(Jazzicon(size, parseInt(address.slice(2, 10), 16)));\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest} >\n        <div ref={ref} style={{width:`${size}px`,height:`${size}px`}}  />\n    </div>\n  )\n}","import React from \"react\";\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\nimport { formatBigNumber, truncateAddress } from \"../../utils\";\nimport Identicon from \"../ui/Identicon\";\n\nconst Wallet = ({ address, amount, symbol, destroy }) => {\n  if (address) {\n    return (\n      <>\n        {/* Wallet Dropdown functionality */}\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"light\"\n            align=\"end\"\n            id=\"dropdown-basic\"\n            className=\"d-flex align-items-center border rounded-pill py-1\"\n          >\n            {amount ? (\n              <>\n                {formatBigNumber(amount)}{\" \"}\n                <span className=\"ms-1\"> {symbol}</span>\n              </>\n            ) : (\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\n            )}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu className=\"shadow-lg border-0\">\n            <Dropdown.Item\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\n              target=\"_blank\"\n            >\n              <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">\n                  {truncateAddress(address)}\n                </span>\n              </Stack>\n            </Dropdown.Item>\n            <Dropdown.Divider />\n            <Dropdown.Item\n              as=\"button\"\n              className=\"d-flex align-items-center\"\n              onClick={() => {\n                destroy();\n              }}\n            >\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\n              Disconnect\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </>\n    );\n  }\n\n  return null;\n};\n\nexport default Wallet;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useContractKit } from '@celo-tools/use-contractkit';\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n\n    // get a contract interface to interact with\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","import { Web3Storage } from \"web3.storage/dist/bundle.esm.min.js\";\n\nconst getAccessToken = () => {\n  const token = process.env.REACT_APP_API_TOKEN;\n  return token;\n};\nconst makeStorageClient = () => {\n  return new Web3Storage({ token: getAccessToken() });\n};\nconst formattedName = (name) => {\n  let file_name;\n  const trim_name = name.trim();\n  if (trim_name.includes(\" \")) {\n    file_name = trim_name.replaceAll(\" \", \"%20\");\n    return file_name;\n  } else return trim_name;\n};\nconst makeFileObjects = (file) => {\n  const blob = new Blob([JSON.stringify(file)], { type: \"application/json\" });\n  const files = [new File([blob], `${file.name}.json`)];\n  return files;\n};\nconst client = makeStorageClient();\nconst storeFiles = async (files) => {\n  const cid = await client.put(files);\n  return cid;\n};\n\n// function to upload an image to Web3.storage\nexport const uploadToIpfs = async (file) => {\n  if (!file) return;\n  try {\n    const file_name = file[0].name;\n    const image_name = formattedName(file_name);\n    const image_cid = await storeFiles(file);\n    const image_url = `https://${image_cid}.ipfs.w3s.link/${image_name}`;\n    return image_url;\n  } catch (error) {\n    console.log(\"Error uploading file: \", error);\n  }\n};\n\n// mint an NFT\nexport const mintNft = async (\n  nftContract,\n  performActions,\n  { name, description, ipfsImage }\n) => {\n  await performActions(async (kit) => {\n    if (!name || !description || !ipfsImage) return;\n    const { defaultAccount } = kit;\n\n    // trim any extra whitespaces from the name and\n    // replace the whitespace between the name with %20\n    const file_name = formattedName(name);\n\n    // convert NFT metadata to JSON format\n    const data = {\n      name,\n      image: ipfsImage,\n      description,\n      owner: defaultAccount,\n    };\n\n    try {\n      // save NFT metadata to IPFS\n      const files = makeFileObjects(data);\n      const file_cid = await storeFiles(files);\n      const URI = `https://${file_cid}.ipfs.w3s.link/${file_name}.json`;\n\n      // upload the NFT, mint the NFT and save the IPFS url to the blockchain\n      let transaction = await nftContract.methods\n        .mint(URI)\n        .send({ from: defaultAccount });\n      return transaction;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  });\n};\n\n// fetch all NFTs\nexport const fetchNfts = async (nftContract) => {\n  try {\n    const nfts = [];\n    const nftsLength = await nftContract.methods.totalSupply().call();\n    for (let i = 0; i < Number(nftsLength); i++) {\n      const nft = new Promise(async (resolve) => {\n        const nftURI = await nftContract.methods.tokenURI(i).call();\n        const nftOwner = await nftContract.methods.ownerOf(i).call();\n        const nftData = await fetchNftMeta(nftURI);\n        resolve({\n          index: i,\n          owner: nftOwner,\n          name: nftData.name,\n          image: nftData.image,\n          description: nftData.description,\n        });\n      });\n      nfts.push(nft);\n    }\n    return Promise.all(nfts);\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// Get NFT metadata from IPFS\nexport const fetchNftMeta = async (ipfsUrl) => {\n  try {\n    if (!ipfsUrl) return null;\n    const fetch_meta = await fetch(ipfsUrl);\n    const meta = await fetch_meta.json();\n\n    return meta;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the owner address of an NFT\nexport const fetchNftOwner = async (minterContract, index) => {\n  try {\n    return await minterContract.methods.ownerOf(index).call();\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// Create new pot\nexport const createPot = async (\n  performActions,\n  stakersContract,\n  potName,\n  potSize\n) => {\n  try {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n      await stakersContract.methods\n        .createPot(potName, potSize)\n        .send({ from: defaultAccount });\n    });\n  } catch (error) {\n    console.log({ error });\n  }\n};\n\n// Fetch all pots from contract\nexport const fetchPots = async (stakersContract) => {\n  try {\n    const data = await stakersContract.methods.getAllPots().call();\n    const pots = await Promise.all(\n      data.map(async (_pot, index) => {\n        return {\n          index,\n          name: _pot[0],\n          size: _pot[1],\n          creator: _pot[2],\n          winner: _pot[3],\n          tokens: _pot[4],\n          stakers: _pot[5],\n          status: _pot[6],\n        };\n      })\n    );\n    return pots;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// Stake NFT into a pot\nexport const stake = async (\n  performActions,\n  stakersContract,\n  stakersAddress,\n  nftContract,\n  potId,\n  tokenId\n) => {\n  try {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n\n      // first approve `stakersContract` to spend `tokenId` from `nftContract`\n      await nftContract.methods\n        .approve(stakersAddress, tokenId)\n        .send({ from: defaultAccount });\n\n      // proceed to stake token\n      await stakersContract.methods\n        .stake(potId, tokenId)\n        .send({ from: defaultAccount });\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Modal, Form } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\";\n\nconst AddNfts = ({ save }) => {\n  const [name, setName] = useState(\"\");\n  const [ipfsImage, setIpfsImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [show, setShow] = useState(false);\n\n  // check if all form data has been filled\n  const isFormFilled = () => name && ipfsImage && description;\n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <button type=\"button\" onClick={handleShow} className=\"add_wine_btn mb-4\">\n        Mint NFT <i class=\"bi bi-plus\"></i>\n      </button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header>\n          <Modal.Title\n            style={{ color: \"#531c1c\", width: \"100%\", textAlign: \"center\" }}\n          >\n            Mint new NFT\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Name\"\n              className={\"mb-3\"}\n              style={{ height: \"45px\", fontSize: \"0.9rem\" }}\n              onChange={(e) => {\n                setName(e.target.value.trim());\n              }}\n            />\n            <Form.Control\n              as=\"textarea\"\n              placeholder=\"Description\"\n              className={\"mb-3\"}\n              style={{ height: \"80px\", fontSize: \"0.9rem\" }}\n              onChange={(e) => {\n                setDescription(e.target.value.trim());\n              }}\n            />\n            <Form.Control\n              type=\"file\"\n              placeholder=\"NFT Image\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                console.log(e.target.files);\n                const image_file = e.target.files;\n                console.log(image_file);\n                const imageUrl = await uploadToIpfs(image_file);\n                if (!imageUrl) {\n                  alert(\"Failed to upload image\");\n                  return;\n                }\n                setIpfsImage(imageUrl);\n              }}\n            />\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer className=\"modal_footer\">\n          <button className=\"close_btn\" onClick={handleClose}>\n            Close\n          </button>\n          <button\n            className=\"create_btn\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n                description,\n                ipfsImage,\n              });\n              handleClose();\n            }}\n          >\n            Mint\n          </button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddNfts.propTypes = {\n  // props passed into this component\n  save: PropTypes.func.isRequired,\n  // address: PropTypes.string.isRequired,\n};\n\nexport default AddNfts;\n","import PropTypes from \"prop-types\";\nimport { Col } from \"react-bootstrap\";\n\n// NFT Cards Functionality\nconst Nft = ({ nft }) => {\n  const { image, description, name, index } = nft;  \n\n  return (\n    <>\n      <Col key={index} className=\"mb-5\">\n        <div className=\"wine_container d-flex flex-wrap\">\n          <div className=\"wine_image\">\n            <img src={image} alt={name} />\n          </div>\n          <div className=\"wine_details\">\n            <div className=\"wine_id\">[{index}]</div>\n            <h2 className=\"wine_name d-flex justify-content-around\">{name}</h2>\n            <p className=\"wine_desc\">{description}</p>\n          </div>\n        </div>\n      </Col>\n    </>\n  );\n};\n\nNft.propTypes = {\n  // props passed into this component\n  image: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default Nft;\n","import React from 'react';\nimport { Spinner} from \"react-bootstrap\";\nconst Loader = () => (\n \n \n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n\n);\nexport default Loader;\n","export default __webpack_public_path__ + \"static/media/pot_of_gold.876f8c61.jpg\";","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport Stakers from \"../../../contracts/Stakers-address.json\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n  fetchNfts,\n  mintNft,\n  createPot as _createPot,\n  fetchPots as _fetchPots,\n  stake as _stake,\n} from \"../../../utils/minter\";\nimport { Row } from \"react-bootstrap\";\nimport potOfGoldImg from \"../../../assets/pot_of_gold.jpg\";\nimport { Modal, Form } from \"react-bootstrap\";\nimport { truncateAddress } from \"../../../utils\";\n\nconst Pot = ({ stake, potData }) => {\n  const [tokenId, setTokenId] = useState(0);\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const { index, name, size, creator, winner, tokens, stakers, status } =\n    potData;\n\n  return (\n    <div className=\"pot\">\n      <img src={potOfGoldImg} />\n      <div className=\"pot_info_button\" onClick={handleShow}>\n        Open\n      </div>\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header>\n          <Modal.Title\n            style={{ color: \"#531c1c\", width: \"100%\", textAlign: \"center\" }}\n          >\n            Pot Details\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"pot-details\">\n            <>\n              <div className=\"pd\">\n                <div className=\"pd-label\">Pot Name:</div>\n                <div className=\"pd-desc\">{name}</div>\n              </div>\n              <div className=\"pd\">\n                <div className=\"pd-label\">Created By:</div>\n                <div className=\"pd-desc\">{truncateAddress(creator)}</div>\n              </div>\n              <div className=\"pd\">\n                <div className=\"pd-label\">Pot Size:</div>\n                <div className=\"pd-desc\">{size}</div>\n              </div>\n              <div className=\"pd\">\n                <div className=\"pd-label\">Slot Remaining:</div>\n                <div className=\"pd-desc\">{size - tokens.length}</div>\n              </div>\n              <div className=\"pd\">\n                <div className=\"pd-label\">Winner:</div>\n                <div className=\"pd-desc\">\n                  {Number(winner) == 0\n                    ? \"No winner yet\"\n                    : truncateAddress(winner)}\n                </div>\n              </div>\n              <div className=\"pd\">\n                <div className=\"pd-label\">Pot Status:</div>\n                <div className=\"pd-desc\">{status == 0 ? \"Open\" : \"Closed\"}</div>\n              </div>\n            </>\n          </div>\n          {status == 0 && (\n            <>\n              <div className=\"pd-sub\">Stake</div>\n              <Form>\n                <Form.Control\n                  type=\"Number\"\n                  placeholder=\"Token ID (Please ensure you are the owner of token)\"\n                  className={\"mb-3\"}\n                  style={{ height: \"45px\", fontSize: \"0.9rem\" }}\n                  onChange={(e) => {\n                    setTokenId(e.target.value);\n                  }}\n                />\n              </Form>\n            </>\n          )}\n        </Modal.Body>\n\n        <Modal.Footer className=\"modal_footer\">\n          <button className=\"close_btn\" onClick={handleClose}>\n            Close\n          </button>\n          {status == 0 && (\n            <button\n              className=\"create_btn\"\n              onClick={async () => {\n                stake(index, tokenId);\n                handleClose();\n              }}\n            >\n              Stake\n            </button>\n          )}\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n};\n\nconst CreatePot = ({ create }) => {\n  const [potName, setPotName] = useState();\n  const [potSize, setPotSize] = useState();\n  const [show, setShow] = useState(false);\n\n  // check if all form data has been filled\n  const isFormFilled = () => potName && potSize;\n\n  // close the popup modal\n  const handleClose = () => setShow(false);\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <button type=\"button\" onClick={handleShow} className=\"add_wine_btn mb-4\">\n        Create Pot <i class=\"bi bi-plus\"></i>\n      </button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header>\n          <Modal.Title\n            style={{ color: \"#531c1c\", width: \"100%\", textAlign: \"center\" }}\n          >\n            Create a new pot\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Pot name\"\n              className={\"mb-3\"}\n              style={{ height: \"45px\", fontSize: \"0.9rem\" }}\n              onChange={(e) => {\n                setPotName(e.target.value);\n              }}\n            />\n            <Form.Control\n              type=\"number\"\n              placeholder=\"Pot size (max amount of tokens pot can take)\"\n              className={\"mb-3\"}\n              style={{ height: \"45px\", fontSize: \"0.9rem\" }}\n              onChange={(e) => {\n                setPotSize(e.target.value);\n              }}\n            />\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer className=\"modal_footer\">\n          <button className=\"close_btn\" onClick={handleClose}>\n            Close\n          </button>\n          <button\n            className=\"create_btn\"\n            disabled={!isFormFilled()}\n            onClick={async () => {\n              create(potName, potSize);\n              handleClose();\n            }}\n          >\n            Create\n          </button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nconst NftList = ({ nftContract, stakersContract }) => {\n  const { performActions, address, kit } = useContractKit();\n  const { defaultAccount } = kit;\n  const [nfts, setNfts] = useState([]);\n  const [pots, setPots] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const getNFTAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n      // fetch all nfts from the smart contract\n      const allNfts = await fetchNfts(nftContract);\n      if (!allNfts) return;\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [nftContract]);\n\n  const getPots = useCallback(async () => {\n    try {\n      setLoading(true);\n      const allPots = await _fetchPots(stakersContract);\n      if (!allPots) return;\n      setPots(allPots);\n    } catch (e) {\n      console.log({ e });\n    } finally {\n      setLoading(false);\n    }\n  }, [stakersContract]);\n\n  // Add new NFT\n  const addNft = async (data) => {\n    try {\n      setLoading(true);\n\n      // create an nft functionality\n      await mintNft(nftContract, performActions, data);\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\n      getNFTAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createPot = async (potName, potSize) => {\n    try {\n      setLoading(true);\n      await _createPot(performActions, stakersContract, potName, potSize);\n      toast(<NotificationSuccess text=\"Updating UI...\" />);\n      getPots();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create new pot\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const stake = async (potId, tokenId) => {\n    const saddr = Stakers.Stakers;\n    try {\n      setLoading(true);\n      await _stake(\n        performActions,\n        stakersContract,\n        saddr,\n        nftContract,\n        potId,\n        tokenId\n      );\n      toast(<NotificationSuccess text=\"Updating UI...\" />);\n      getPots();\n    } catch (error) {\n      console.log(error);\n      toast(<NotificationError text=\"Failed to stake token\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    try {\n      if (address && nftContract && stakersContract) {\n        getNFTAssets();\n        getPots();\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }, [nftContract, stakersContract, address, getNFTAssets, getPots]);\n\n  if (address) {\n    return (\n      <>\n        {!loading ? (\n          <>\n            <div className=\"marketplace\">\n              <h1\n                className=\"fs-10 fw-bold text-center mb-5\"\n                style={{ color: \"#531c1c\" }}\n              >\n                Available Pots\n              </h1>\n              <CreatePot create={createPot} />\n              <div className=\"pots\">\n                {pots.map((potData) => (\n                  <Pot stake={stake} potData={potData} />\n                ))}\n              </div>\n            </div>\n\n            <div className=\"marketplace\">\n              <h1\n                className=\"fs-10 fw-bold text-center mb-5\"\n                style={{ color: \"#531c1c\" }}\n              >\n                My NFTs\n              </h1>\n              <AddNfts save={addNft} address={address} />\n            </div>\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\n              {/* display all NFTs */}\n              {nfts\n                .filter((nft) => nft.owner == defaultAccount)\n                .map((_nft) => (\n                  <Nft\n                    key={_nft.index}\n                    nft={{\n                      ..._nft,\n                    }}\n                  />\n                ))}\n            </Row>\n          </>\n        ) : (\n          <Loader />\n        )}\n      </>\n    );\n  }\n  return null;\n};\n\nNftList.propTypes = {\n  // props passed into this component\n  nftContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nNftList.defaultProps = {\n  nftContract: null,\n};\n\nexport default NftList;\n","export default __webpack_public_path__ + \"static/media/logo.41933186.png\";","import React from \"react\";\nimport Cover from \"./components/minter/Cover\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport Wallet from \"./components/wallet\";\nimport { useBalance, useNftContract, useStakersContract } from \"./hooks\";\nimport Nfts from \"./components/minter/nfts\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport \"./App.css\";\nimport { Container, Nav } from \"react-bootstrap\";\nimport logo from \"./assets/logo.png\";\n\nconst App = function AppWrapper() {\n  const { address, destroy, connect } = useContractKit();\n\n  //  fetch user's celo balance using hook\n  const { balance, getBalance } = useBalance();\n\n  // initialize the NFT mint contract\n  const nftContract = useNftContract();\n  const stakersContract = useStakersContract();\n\n  return (\n    <>\n      <Notification />\n      <Nav className=\"nav justify-content-between px-5 py-3\">\n        <Nav.Item>\n          <img className=\"logo_img\" src={logo} alt=\"Logo\" />\n          <span className=\"logo_name\">Stakers</span>\n        </Nav.Item>\n        {address ? (\n          <Nav.Item>\n            {/*display user wallet*/}\n            <Wallet\n              address={address}\n              amount={balance.CELO}\n              symbol=\"CELO\"\n              destroy={destroy}\n            />\n          </Nav.Item>\n        ) : (\n          <Nav.Item>\n            <button onClick={() => connect().catch((e) => console.log(e))}>\n              Connect Wallet\n            </button>\n          </Nav.Item>\n        )}\n      </Nav>\n      {address ? (\n        <Container fluid=\"md\">\n          <main>\n            <Nfts\n              updateBalance={getBalance}\n              nftContract={nftContract}\n              stakersContract={stakersContract}\n            />\n          </main>\n        </Container>\n      ) : (\n        <Cover connect={connect} />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address || balance) getBalance();\n  }, [address, getBalance, balance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","import {useContract} from './useContract';\nimport ABI from '../contracts/NftContract.json';\nimport ADDRESS from '../contracts/NftContract-address.json';\n\n\n// export interface for NFT contract\nexport const useNftContract = () => useContract(ABI.abi, ADDRESS.NftContract);\n","import { useContract } from \"./useContract\";\r\nimport ABI from \"../contracts/Stakers.json\";\r\nimport ADDRESS from \"../contracts/Stakers-address.json\";\r\n\r\n// export interface for stakers contract\r\nexport const useStakersContract = () => useContract(ABI.abi, ADDRESS.Stakers);\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"Stakers\",\n        description: \"One stop point for staking NFTs\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}